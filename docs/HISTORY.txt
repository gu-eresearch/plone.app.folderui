Changelog
=========

0.03
----

  This release adds multiple selection from facets: select multiple filters
  within a single facet or index, and join them with an AND or OR
  conjunction.  Two types of mutliple-selection facets are possible:
  
  (a) "disjoint" facets: content items can only have one possible choice,
        muliple selection implies an OR conjunction -- AND is non-sequitur.
  
  (b) "mutltiset" facets: content items can have more than one value, so 
        conjunction is user-selectable.

  Changes:
  --------
  
  * Tests for multiset (multiple choices AND/OR within single facet/index)
    queries (and any fixes to query runner or listing provider if tests
    dictate).
  
  * Noscript HTML form submission UI for multiset queries within same facet. 
    This will be one form per page.
  
  * Javascript enhancements for multiple-selection.
  
  * RSS feed template for results, partially implements OpenSearch
    batching mechanisms, at least well enough to provide batching metadata.
    It is expected that this can serve as one component needed for
    "live filtering" single-page AJAX re-loading of results in future
    releases.
  
  * UI tweaks to allow someone to both narrow their search in a 
    facet and change their search for a single choice in such a way that also
    is consistent with multi-set UI.


0.02
----

This release added the ability to include/exclude subfolder contents, and most
significantly, added a robust system for generating link counts for filters.

  * Hookup view in available view_methods in FTIs for folders, Plone site on 
    package install extension profile.

  * Added local utility for set caching, persists filter ids to set hash ids,
    and hash of frozenset of catalog record ids to frozenset.  This allows for
    caching query results for each filter, and only performing a quick set
    intersection for each link, not an actual catalog query, if cached. 

  * Refactored listings code out of view class into a separate controller 
    class (in listing.py).  This is a multi-adapter that takes a folder and
    an optional IComposedQuery object, and encapsulates results, facets, and
    filter-counts for that context.  This is more testable; integration tests
    included.

  * Implemented filter count computation (intersect main result with a
    singular filter set) and display along with a result-set caching system
    that avoids the need to re-query the catalog for each set (excepting
    cases where an object in the main result set is marked as invalidated
    on edit).

  * Implemented filter-count display in navigation adjacent to each filter
    hyperlink contained within facet navigation.

  * Test improvements for dynamic vocabulary factory in test_vocab.py.

  * Integrated unit tests so that they can be run either using
    instance|zopectl test or from command-line without an instance.

  * Implemented tests for set caching and cache invalidation related to
    set/filter intersection counts from the FacetedListing.counts property.

  * Global component registrations now largely moved from Python to ZCML.

  * Omit display of zero-count filter links.  This currently requires a user
    to remove a filter to see alternatives (narrowing versus changing) -- this
    will/should be improved in the UI in future releases.

  * Sort (by default) filter links within a facet by most-to-least hits
    (this can be overridden in future code with custom cmp function).

  * Add the ability to strike a filter from within facet navigation, in
    addition to the filter summary box.

  * Support optional inclusion of subfolder contents in listings and facet
    counts.  The default should be to include direct contents only, subfolder
    inclusion can be enabled/disabled in the navigation.

  * Integration test for subfolder include/exclude behavior.

  * Bug fix:  better behavior when empty result, fixed exception and display
    message in listings template.

  * Integration test for component registrations done in ZCML.


0.01 (Early community feedback release of some basic functionality)
-------------------------------------------------------------------
 
 * A facet_listing view for folderish objects in Plone.
 
 * A basic working set of fully-functional, but hardcoded in configuration
   facets for folder listing.

 * A text search facet.
 
 * Support for filter vocabularies sourced from dynamic vocabularies found
   via utility lookup, as well as directly set on facet.
 
 * Simple transient objects representing configuration state.

 * add BaseTestCase with convenience methods to create test content
        
 * move package sources into 'src/' subdirectiory
 
 * add a generic setup profile 'facet-samples' with a set of sample data

 * Early initial import to trunk (early development) 2009-06-18.

